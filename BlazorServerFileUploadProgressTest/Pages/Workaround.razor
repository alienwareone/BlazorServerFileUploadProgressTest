@page "/workaround"
@using System.IO

<h1>Upload</h1>

<InputFile OnChange="HandleFileSelected" @ref="inputFile" />

@if (errorMessage != null)
{
    @errorMessage
}
else if (uploading)
{
    @:Hochladen. Bitte warten... (@uploadProgress%)
}
else
{
    if (picture != null)
    {
        <img src="data:image/jpeg;base64,@picture" style="max-height: 200px; max-width: 200px;" />
    }
}

@code {
    private string picture;
    private bool uploading;
    private int uploadProgress = -1;
    private string errorMessage;
    private InputFile inputFile;

    async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploading = true;
        inputFile.AdditionalAttributes ??= new Dictionary<string, object>();
        inputFile.AdditionalAttributes.Add("style", "display:none;");

        var file = e.File;
        var bufferSize = 1024;
        var buffer = new byte[bufferSize];

        try
        {
            using (var inputFileStream = file.OpenReadStream(file.Size))
            using (var memoryFileStream = new MemoryStream())
            {
                int bytesRead;
                var lastUploadProgress = uploadProgress;
                while ((bytesRead = await inputFileStream.ReadAsync(buffer)) > 0)
                {
                    memoryFileStream.Write(buffer, 0, bytesRead);
                    uploadProgress = (int)((float)memoryFileStream.Length / file.Size * 100);

                    if (uploadProgress > lastUploadProgress + new Random().Next(5, 10))
                    {
                        lastUploadProgress = uploadProgress;
                        StateHasChanged();
                    }
                }

                var data = memoryFileStream.ToArray();
                picture = Convert.ToBase64String(data);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        uploading = false;
        inputFile.AdditionalAttributes.Remove("style");
        StateHasChanged();
    }
}